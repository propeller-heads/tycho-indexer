name: Continuous Integration

on:
  pull_request:

permissions:
  id-token: write
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"

jobs:
  # We need to build our own postgres image with some extensions installed
  build_postgres:
    name: Build Postgres image with extensions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Calculate Dockerfile hash
        id: dockerfile_hash
        run: echo "hash=$(md5sum postgres.Dockerfile | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        id: cache-docker-image
        uses: actions/cache@v3
        with:
          path: /tmp/extended_postgres.tar
          key: ${{ runner.os }}-postgres-${{ steps.dockerfile_hash.outputs.hash }}

      - name: Set up Docker Buildx
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build PostgreSQL Docker Image
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: postgres.Dockerfile
          tags: extended_postgres:latest
          outputs: type=docker,dest=/tmp/extended_postgres.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: extended_postgres
          path: /tmp/extended_postgres.tar
  compile_and_test:
    name: Compile & Test
    runs-on: ubuntu-latest
    needs: build_postgres
    timeout-minutes: 30
    strategy:
      matrix:
        toolchain:
          - stable
    env:
      DATABASE_URL: postgres://postgres:mypassword@localhost:5432/tycho_indexer_0
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: extended_postgres
          path: /tmp
      - name: Load image
        run: docker load --input /tmp/extended_postgres.tar
      - name: Run PostgreSQL Container
        run: |
          docker run -d \
          --name postgres \
          -e POSTGRESQL_PASSWORD=mypassword \
          -e POSTGRESQL_DATABASE=tycho_indexer_0 \
          -e POSTGRESQL_USERNAME=postgres \
          -e POSTGRESQL_SHARED_PRELOAD_LIBRARIES=pg_cron \
          -p 5432:5432 \
          extended_postgres:latest
      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec postgres pg_isready -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done
      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Install libsqlite3-dev
        run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev
      - name: Install diesel cli
        uses: baptiste0928/cargo-install@v2
        with:
          crate: diesel_cli
          features: postgres
      - name: DB Setup
        run: diesel migration run --migration-dir ./tycho-storage/migrations
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Compile
        run: cargo nextest run --workspace --all-targets --all-features --no-run --locked
      - name: Test
        run: cargo nextest run --workspace --all-targets --all-features -E 'not test(serial_db)'
      - name: Test (Serial)
        run: cargo nextest run --workspace --all-targets --all-features -E 'test(serial_db)'

  lint:
    name: Code Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          components: rustfmt, clippy
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Clippy
        run: cargo +${{steps.toolchain.outputs.name}} clippy --workspace --all-targets --all-features

      - name: Rustfmt
        run: cargo +${{steps.toolchain.outputs.name}} fmt --all --check

  sql_formatting:
    name: SQL files formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: pg-formatter-action
        uses: kayibal/pg-formatter-action@master
        with:
          pattern: "tycho-indexer/migrations/**/*.sql"
          extra-args: "--no-space-function -i"

      - name: Check diffs
        run: git diff --exit-code
